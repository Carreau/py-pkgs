[
["whole-game.html", "3 The Whole Game 3.1 Use Poetry to create a Python project 3.2 Put your project under version control", " 3 The Whole Game This chapter demonstrates how to develop an entire small toy Python package from beginning to end. It’s purpose it to motivate and give a high level overview of how a Python package can and should be developed. Later chapters will delve deeper into important package specifics. 3.1 Use Poetry to create a Python project To create a new Python project with Poetry named foo-categoricals, using the terminal navigate to the parent directory that you wish the project directory to live in and type: $ poetry new foocategoricals Created package foocategoricals in foocategoricals When we do this, Poetry creates a directory with the following structure: /foocategoricals ├── README.md ├── foocategoricals │ └── __init__.py ├── pyproject.toml └── tests ├── __init__.py └── test_foocategoricals.py It gives us a boilerplate file and directory structure suitable for building a Python package, including a file for us to write out Python functions that our package will distribute (foocategoricals/__init__.py), a home for our tests to ensure that our package functions work as we expect they should (tests/__init__.py), as well as a pyproject.toml file that we will use to define our project’s metadata. Optional for RStudio IDE users Users of the RStudio IDE may also want to make this Python project directory an RStudio project. Why might you ask? Well, once you have an *.Rproj file, you can use that file to quickly open the RStudio IDE (which has a terminal and an interactive Python REPL, assuming you have set this up with reticulate) to the project’s root directory. 3.2 Put your project under version control It is in our opinion that every data science project should put under local and remote version control. The tools we recommend using for this are Git &amp; GitHub. For this book, we assume Git is installed on their machine, have novice Git skills, and that users have a GitHub.com account. 3.2.1 Set-up local version control From the terminal and in the root of this project directory, initialize the repository to be tracked by Git: $ git init Initialized empty Git repository in /Users/tiffany/Documents/ubc-mds/foocategoricals/.git/ Next, tell Git which files to track (all of them at this point) and commit these changes locally: $ git add . $ git commit -m &quot;initial project set-up&quot; [master (root-commit) 00bc4af] initial project set-up 7 files changed, 35 insertions(+) create mode 100644 .gitignore create mode 100644 README.rst create mode 100644 foocategoricals.Rproj create mode 100644 foocategoricals/__init__.py create mode 100644 pyproject.toml create mode 100644 tests/__init__.py create mode 100644 tests/test_foocategoricals.py Optional for RStudio IDE users You may want to create a .gitignore file where you tell Git to ignore RStudio-specific files such as .Rproj.user and foocategoricals.Rproj that are typically not found in a Python package. 3.2.2 Set-up remote version control Now that we have set up our local version control, let’s create a repository on GitHub.com and set that as the remote version control home for this project: The options we recommend for setting up a repository for a Python package using the workflow we present in this book include: give the GitHub.com repository the same name as your Python Poetry project’s name make the GitHub.com repository public do not initialize the GitHub.com repository with a README Next, we set-up the remote address locally, and push our project to GitHub.com: $ git remote add origin git@github.com:ttimbers/foocategoricals.git $ git push -u origin master Note: the example above uses SSH authentication with GitHub, HTTPS authentication works as well and would use this url in place of the one shown above to set the remote: https://github.com/ttimbers/foocategoricals.git. "]
]
