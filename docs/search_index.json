[
["index.html", "Python packages Chapter 1 Preface", " Python packages Tiffany Timbers &amp; Tomas Beuzen 2020-02-13 Chapter 1 Preface This book is aimed at Python intermediate users who want to package up their code to share it with their collaborators (including their future selves) and the wider Python community. It’s scope and intent is inspired by the R packages book written by Hadley Wickham and Jenny Bryan. "],
["setup.html", "Chapter 2 System setup 2.1 Installing and updating Python 2.2 Register for a PyPI account 2.3 Setting up the RStudio IDE with Python 2.4 Alternative Python IDEs", " Chapter 2 System setup 2.1 Installing and updating Python In order to start off on a good footing, we recommend you follow these system set-up instructions so you will run into fewer technical issues (compared to not using the same system this book was designed for). We recommend installing Python 3.7 via the Anaconda distribution, following the instructions here: https://docs.anaconda.com/anaconda/install/. If you already have installed this distribution, ensure Python, and the conda package manager is up to date by running the following commands: $ conda update --all Next, use conda to install Python poetry - a python package that will help us more efficiently build our Python packages: $ conda install -c conda-forge poetry Finally, we install cookiecutter - a python package that will create Python projects from project templates $ conda install -c conda-forge cookiecutter 2.2 Register for a PyPI account To publish a Python package on PyPI to share with others, you will need to register for a PyPI account. You can do so freely by clicking here: https://pypi.org/account/register/ Before we are ready to publish our packages on PyPI, it is advisable that we test drive them on TestPyPI first. To do so, you need to also register for a TestPyPI account. You can do so freely by clicking here: https://test.pypi.org/account/register/ 2.3 Setting up the RStudio IDE with Python This book will use the RStudio integrated development environment (IDE) to develop Python packages - we use RStudio because in the UBC Master of Data Science program we teach both the R and Python programming languages and prefer to use an IDE that works well with both. However, any other Python IDE should work and we briefly describe some in Alternative Python IDEs. If you would like to use the RStudio IDE we recommend installing the most recent version of the IDE from the preview site: https://rstudio.com/products/rstudio/download/preview/ and then installing R from CRAN, and the reticulate R package via install.package(\"reticulate\") from the R console inside RStudio. When installing reticulate, you will be prompted to install miniconda, if you have already installed the Anaconda distribution of Python, answer “no” to installing miniconda at this prompt. 2.3.1 Find where Anaconda is installed on your machine 2.3.1.1 Mac OS &amp; Linux In terminal, type: which Python 2.3.1.2 Windows In the Anaconda Prompt type: where python. 2.3.2 Configuring reticulate for to use the Python REPL inside RStudio Create a file named .Rprofile in your $HOME directory that contains the following: Sys.setenv(RETICULATE_PYTHON = &quot;path_to_the_folder_containing_anaconda&#39;s_python&quot;) For me the \"path_to_the_folder_containing_anaconda's_python\" was '//anaconda3/bin/'. Restart RStudio for this to take effect. 2.3.3 Configuring the RStudio terminal 2.3.3.1 Mac OS &amp; Linux Open (or create) the file called .bash_profile in your $HOME directory and add the following to the last line of that file: export PATH=&quot;path_to_the_folder_containing_anaconda&#39;s_python:$PATH&quot; For me that line is export PATH=\"//anaconda3/bin:$PATH\". Restart RStudio for this to take effect. 2.3.3.2 Windows The default terminal in RStudio on Windows is PowerShell. This causes some unexpected problems as its not a true bash shell. You should change this using the following menu selections inside RStudio: Global Options -&gt; Terminal -&gt; Shell -&gt; Git Bash 2.4 Alternative Python IDEs Commonly used free Python IDEs include Visual Studio Code, Atom, and PyCharm Community Edition. Visual Studio Code and Atom are text editors that can be customised with extensions to act as Python (or any other language) IDEs. In contrast, PyCharm is specifically a Python IDE and will work right out of the box - we describe setting up PyCharm briefly below. 2.4.1 PyCharm Community Edition PyCharm offers a paid Professional version and free Community version. You can download either from https://www.jetbrains.com/pycharm/download/. Once downloaded, PyCharm will guide you through initial setup. We recommended using all default settings throughout the setup, with the exception of installing the Markdown Plugin when prompted to install “Featured Plugins”. Once setup is complete you should see something like the following screenshot: We now need to link Anaconda with PyCharm. Click Configure at the bottom right of the screen and then Preferences. Select Project Interpreter from the tab-menu and then click the gear icon to the right of the drop-down menu that appears and select Add…. In the pop-up menu that appears, click System Interpreter from the tab-menu and click the three dots … to the right of the drop-down menu. You now need to provide the path to Anaconda’s installation of Python, something like “/Users/user/anaconda3/bin/python”. You can determine the path using the following: Mac OS &amp; Linux: In terminal, type: which Python Windows: In the Anaconda Prompt type: where python. Copy and paste the path into the PyCharm pop-up. At this point, your window will probably look something like the one below. Click OK. Click OK again to get back to the Preferences menu, at which point PyCharm will show Anaconda’s installation of Python in the Project Interpreter drop-down menu and will populate the screen with the packages available to that interpreter (these will be all the packages installed in your base Anaconda environment) Click OK to return to the main menu. To start a new project you will click Create New Project. In the subsequent screen, an example of which is shown below, you may choose a location for your new project and you can also select an interpreter. Choose the Existing Interpreter radio button and then from the drop-down menu select Anaconda’s Python interpreter that we just set-up (this will likely be the only option in the drop-down menu). Click Create to get started. Note that PyCharm has excellent integration with Conda environments. If you wish to use a custom Conda environment for a project, you can easily create or select an existing environment to use as a project’s interpreter. To do this, in Step 3 above, simply click Conda Environment rather than System Interpreter and create or select an existing Conda environment. This environment will then be available to select as a project interpreter for new or existing projects. This was a brief, practical guide to getting started with PyCharm Community Edition. We recommend checking out the documentation for more guidance on setting up and using PyCharm. "],
["whole-game.html", "Chapter 3 The Whole Game 3.1 Use Cookiecutter &amp; Poetry to create a Python project 3.2 Put your project under version control 3.3 Write the first function 3.4 Test drive your package code", " Chapter 3 The Whole Game This chapter demonstrates how to develop an entire small toy Python package from beginning to end. It’s purpose it to motivate and give a high level overview of how a Python package can and should be developed. Later chapters will delve deeper into important package specifics. This chapter is a Pythonified version of the Whole Game chapter written by Jenny Bryan that can be found in the the R packages book. 3.1 Use Cookiecutter &amp; Poetry to create a Python project So that we do not have to create a complicated file and directory structure ourselves, we will use Cookiecutter &amp; Poetry to do this for us! First we start with using Cookiecutter to create the project file and directory structure for our Python project (which will be a Python package). We will use a simplified version of the template base by the PyOpenSci organization designed specifically for creating Python packages. PyOpenSci is a not-for-profit organization that promotes open and reproducible research through peer-review of scientific Python packages. To use Cookiecutter to set up the structure of your Python package, run the line of code below in the terminal from the directory where you would like your package to live. $ cookiecutter https://github.com/UBC-MDS/cookiecutter-pyopensci.git You will be prompted to provide information that will help customize the project. Here is a example of how to respond the the prompts: full_name [Audrey Roy Greenfeld]: Tiffany Timbers email [audreyr@example.com]: tiffany.timbers@stat.ubc.ca github_username [audreyr]: ttimbers project_name [Python Boilerplate]: foocategoricals project_slug [foocategoricals]: foocategoricals project_short_description [Python Boilerplate contains all the boilerplate you need to create a Python package.]: Python package that eases the pain concatenating Pandas categoricals! pypi_username [ttimbers]: ttimbers version [0.1.0]: 0.1.0 use_pypi_deployment_with_travis [n]: n add_pyup_badge [n]: n Select open_source_license: 1 - MIT license 2 - BSD license 3 - ISC license 4 - Apache Software License 2.0 5 - GNU General Public License v3 Choose from 1, 2, 3, 4, 5 [1]: 1 Next we initialize the project as a Poetry project so that we can take advantage of the package management and building tools provided by Poetry: $ poetry init foocategoricals Again we are prompted for more information. We are provided with some suggestions for the information (which I think is gleaned from the Cookiecutter template that we just set up), and if we agree we can simply click enter at the prompt. Here is a example of how to respond the the prompts: This command will guide you through creating your pyproject.toml config. Package name [foocategoricals]: Version [0.1.0]: Description []: Python package that eases the pain concatenating Pandas categoricals! Author [ttimbers &lt;tiffany.timbers@stat.ubc.ca&gt;, n to skip]: License []: MIT Compatible Python versions [^3.7]: Would you like to define your main dependencies interactively? (yes/no) [yes] no Would you like to define your dev dependencies (require-dev) interactively (yes/no) [yes] no Generated file [tool.poetry] name = &quot;foocategoricals&quot; version = &quot;0.1.0&quot; description = &quot;Python package that eases the pain concatenating Pandas categoricals!&quot; authors = [&quot;ttimbers &lt;tiffany.timbers@stat.ubc.ca&gt;&quot;] license = &quot;MIT&quot; [tool.poetry.dependencies] python = &quot;^3.7&quot; [tool.poetry.dev-dependencies] [build-system] requires = [&quot;poetry&gt;=0.12&quot;] build-backend = &quot;poetry.masonry.api&quot; Do you confirm generation? (yes/no) [yes] yes (base) dhcp-206-87-122-46:foocategoricals tiffany$ poerty build bash: poerty: command not found (base) dhcp-206-87-122-46:foocategoricals tiffany$ poetry build Creating virtualenv foocategoricals-lqqH1SDF-py3.7 in /Users/tiffany/Library/Caches/pypoetry/virtualenvs Building foocategoricals (0.1.0) - Building sdist - Built foocategoricals-0.1.0.tar.gz - Building wheel - Built foocategoricals-0.1.0-py3-none-any.whl After using Cookiecutter and Poetry, we end up with the following directory structure: foocategoricals ├── README.md ├── foocategoricals │ └── __init__.py ├── pyproject.toml └── tests ├── __init__.py └── test_foocategoricals.py It gives us a boilerplate file and directory structure suitable for building a Python package, including a file for us to write out Python functions that our package will distribute (foocategoricals/__init__.py), a home for our tests to ensure that our package functions work as we expect they should (tests/__init__.py), as well as a pyproject.toml file that we will use to define our project’s metadata. Optional for RStudio IDE users Users of the RStudio IDE may also want to make this Python project directory an RStudio project. Why might you ask? Well, once you have an *.Rproj file, you can use that file to quickly open the RStudio IDE (which has a terminal and an interactive Python REPL, assuming you have set this up with reticulate) to the project’s root directory. 3.2 Put your project under version control It is in our opinion that every data science project should put under local and remote version control. The tools we recommend using for this are Git &amp; GitHub. For this book, we assume Git is installed on their machine, have novice Git skills, and that users have a GitHub.com account. 3.2.1 Set-up local version control From the terminal and in the root of this project directory, initialize the repository to be tracked by Git: $ git init Initialized empty Git repository in /Users/tiffany/Documents/ubc-mds/foocategoricals/.git/ Next, tell Git which files to track (all of them at this point) and commit these changes locally: $ git add . $ git commit -m &quot;initial project set-up&quot; [master (root-commit) 00bc4af] initial project set-up 7 files changed, 35 insertions(+) create mode 100644 .gitignore create mode 100644 README.rst create mode 100644 foocategoricals.Rproj create mode 100644 foocategoricals/__init__.py create mode 100644 pyproject.toml create mode 100644 tests/__init__.py create mode 100644 tests/test_foocategoricals.py Optional for RStudio IDE users You may want to create a .gitignore file where you tell Git to ignore RStudio-specific files such as .Rproj.user and foocategoricals.Rproj that are typically not found in a Python package. 3.2.2 Set-up remote version control Now that we have set up our local version control, let’s create a repository on GitHub.com and set that as the remote version control home for this project: The options we recommend for setting up a repository for a Python package using the workflow we present in this book include: give the GitHub.com repository the same name as your Python Poetry project’s name make the GitHub.com repository public do not initialize the GitHub.com repository with a README Next, we set-up the remote address locally, and push our project to GitHub.com: $ git remote add origin git@github.com:ttimbers/foocategoricals.git $ git push -u origin master Note: the example above uses SSH authentication with GitHub, HTTPS authentication works as well and would use this url in place of the one shown above to set the remote: https://github.com/ttimbers/foocategoricals.git. 3.3 Write the first function Pandas categoricals are a very useful datatype for modeling (and were inspired by R’s factors), but certain manipulations of this data type can be tricky in data wrangling. One such challenge is concatenation of Pandas categoricals. Let’s observe the result of trying to concatenate two Pandas categoricals objects: &gt;&gt;&gt; import pandas as pd &gt;&gt;&gt; a = pd.Categorical([&quot;character&quot;, &quot;hits&quot;, &quot;your&quot;, &quot;eyeballs&quot;]) &gt;&gt;&gt; b = pd.Categorical([&quot;but&quot;, &quot;integer&quot;, &quot;where it&quot;, &quot;counts&quot;]) &gt;&gt;&gt; pd.concat([a, b]) ## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: cannot concatenate object of type &#39;&lt;class &#39;pandas.core.arrays.categorical.Categorical&#39;&gt;&#39;; only Series and DataFrame objs are valid This occurs because the categoricals are represented as integers in memory, and in a the integer 0 corresponds to the word “character” while in b, the integer 0 corresponds to the word “but”. Thus, when we ask Python to concatenate these two Pandas categorical options it doesn’t know what to do with these integer mappings to different categories, and so it throws an error. We can get around this several ways, one way is to convert the Pandas categoricals to a str type, then do the concatenation, and finally convert the concatenated Pandas obeject to a categorical again. We demonstrate that approach below: &gt;&gt;&gt; concatenated = pd.concat([pd.Series(a.astype(&quot;string&quot;)), pd.Series(b.astype(&quot;string&quot;))]) &gt;&gt;&gt; pd.Categorical(concatenated) ## [character, hits, your, eyeballs, but, integer, where it, counts] ## Categories (8, object): [but, character, counts, eyeballs, hits, integer, where it, your] That seems to work 🎉, but its quite a bit of typing everytime we want to do this… Let’s turn this into a function called catbind! def catbind(a, b): concatenated = pd.concat([pd.Series(a.astype(&quot;string&quot;)), pd.Series(b.astype(&quot;string&quot;))]) return pd.Categorical(concatenated) catbind(a, b) ## [character, hits, your, eyeballs, but, integer, where it, counts] ## Categories (8, object): [but, character, counts, eyeballs, hits, integer, where it, your] Note - this book assumes you know how to write, document and test functions in Python. To learn more about this see Think Python, Chapter 3: Functions by Allen Downey. Where do we save this function if we want it to be a part of our foocategorical Python package? Let’s review the landscape of our Python project so far: foocategoricals ├── README.md ├── foocategoricals │ └── __init__.py ├── pyproject.toml └── tests ├── __init__.py └── test_foocategoricals.py All the code that we would like the user to run as part of our package should live inside the foocategoricals directory. Typically, inside this directory, we would create a sub-directory containing a python script to house the function. Let’s do that now: First we create a subdirectory inside foocategoricals called cat using mkdir in the terminal: $ mkdir foocategoricals/cat Note: mkdir is a command in the bash shell that we can use to create new directories. You are welcome to create directories using the RStudio IDE, or your computer’s OS if you prefer that workflow. Next we create a python script called cat.py that lives inside the cat directory and save our catbind function there. Our project directory structure should now look like this: foocategoricals ├── README.md ├── foocategoricals │ ├── __init__.py | └── cat | ├── cat.py ├── pyproject.toml └── tests ├── __init__.py └── test_foocategoricals.py Given that our package depends on the Pandas Python package, we should import Pandas at the top of the cat.py file. here’s what cat.py should now look like: import pandas as pd def catbind(a, b): concatenated = pd.concat([pd.Series(a.astype(&quot;string&quot;)), pd.Series(b.astype(&quot;string&quot;))]) return pd.Categorical(concatenated) 3.4 Test drive your package code To test drive the function we just wrote we can import it into an interactive Python session as shown: &gt;&gt;&gt; from foocategoricals.cat import cat By doing this we can access the the function in our Python session via cat.catbind. Let’s now try to use this function to concatenate two Pandas categoricals: &gt;&gt;&gt; import pandas as pd &gt;&gt;&gt; a = pd.Categorical([&quot;character&quot;, &quot;hits&quot;, &quot;your&quot;, &quot;eyeballs&quot;]) &gt;&gt;&gt; b = pd.Categorical([&quot;but&quot;, &quot;integer&quot;, &quot;where it&quot;, &quot;counts&quot;]) &gt;&gt;&gt; cat.catbind(a, b) [character, hits, your, eyeballs, but, integer, where it, counts] Categories (8, object): [but, character, counts, eyeballs, hits, integer, where it, your] Hurray again! This seems to work as expected! "]
]
